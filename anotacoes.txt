-------PREPARANDO O AMBIENTE DE DESENVOLVIMENTO------

Utilizado o xamp para instalação dos programas necessários para o curso, ele é uma ferramenta que auxilia na instalação do php e outros programas par o ambiente de desenvolvimento.

Arquivo de configuração do Apache:
httpd.conf

Arquivo de configuração do PHP:
php.ini

Alterado o document root no httpd.conf, de C:\xampp\htdocs para D:\GitHub\curso_php_completo

Caso queira alterar alguma informação ou configuração, deve-se usar o arquivo do programa que comanda o recurso alterado.

> Xamp Control Panel
* Inicia o serviço Apache
* Configura para iniciar junto com o windows
* Configura como serviço, rodando sempre que a máquina estiver ligada

Portas Apache
porta 80 - protocolo http
porta 443 - protocolo https

Porta Mysql
porta 3306


-------ARQUITETURA CLIENTE SERVIDOR------

O php roda apenas no lado do servidor, e sempre devolve (o response) um código html


-------VARIÁVEIS------

função var_dump -> exibe o tipo de dado, o tamanho da variável e o conteúdo.

-------CONSTANTES------

Usado quando for necessário uma "variável" que não possa ter o valor alterado, naquela página. 
Ex: definição de idioma, conexão com db

usado o 'define' para ser declarada.

-------INCLUDE E REQUIRE------

Auxilia na modularização, permitindo importar arquivos para dentro da minha página e utilizar os recursos desses arquivos nessa página.

***Ficar atento aos erros, pode ocorrer no arquivo original e não onde está sendo usado o include***

Quando o arquivo não está na mesma pasta deve-se ficar atento ao path do include.

require ou include ONCE: Pode ocorrer de eu solicitar um require e o arquivo solicitado tambem tenha um require. O ONCE evita que eu utilize a mesma função duas vezes, caso o eu esteja incluindo um arquivo que está dentro do requisitado.

Diferença entre include e require:

Require -> Obriga que o arquivo existe e esteja funcionando corretamente, caso não seja dessa maneira, ocorrerá erro fatal. ideal de ser usado quando não tenho uma configuração específica para o include, pois obriga o código a funcionar corretamente.


Include -> Tenta executar o restante do código mesmo se houverem falhas no arquivo solicitado. E tem mais recursos.


-------SESSAO------

São semelhantes as constantes. E sao visualizadas enquanto o usuário está conectado. Conecta o usuário ao servidor. Funciona criando um arquivo temporário no cliente e outro no servidor, fazendo a ponte para a conexão, geralmente durando 20 min.
Sempre será usado o session_start() no código, a nao ser que eu altere no php.ini.
Cada sessão gera um id pelo servidor, podendo ser verificada pela função session_id();
funções para sessão: https://www.php.net/manual/pt_BR/book.session.php


-------FUNÇÕES------

Lembrar de que parâmetros obrigatórios devem ir sempre a esquerda.


Parametro por valor x referencia:
Por padrão existe o escopo da função, onde se eu usar uma função e alterar o seu valor, esse valor só será alterado na função. Essa é a passagem por valor.
A passagem por referencia, informa o endereço da varável para ser alterado lá, atualizando seu valor de acordo com a função. Para isso basta usar o & ao lado do parametro.

Funções anônimas:
Usada para funções que provavelmente vão demorar para serem executadas.


-------DATAS------

A função date() exige no mímino um argumento, que é o formado da data.
Ex: date("d/m/Y");

O time stamp é gerado de acordo com a minha necessidade e utilizado para calcular minhas datas, a referencia dele é a quantidade de segundos desde 01/01/1970. Posso usar o comando time() para gerá-lo.

setlocale: parametro LC_ALL muda toda minha configuração de local para o local que será definido. Em seguida defino o local. Ideal utilizar os padrões (windows, linux e utf-8).
Formatações strftime: https://www.php.net/manual/pt_BR/function.strftime.php

De preferenci usar as classes datetime.


-------ORIENTAÇÃO A OBJETOS------

Classes -> Meios de organização do software, onde seus atributos e métodos correspondem a um determinado assunto ou recurso.

Objeto -> É uma varável que representa a classe, podendo ser instanciada em outro local do sistema.

Static -> Permite que eu execute ou acesse alguma informação de uma classe, sem necessidade de instanciar, podendo usar dentro do setter por exemplo.