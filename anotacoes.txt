-------PREPARANDO O AMBIENTE DE DESENVOLVIMENTO------

Utilizado o xamp para instalação dos programas necessários para o curso, ele é uma ferramenta que auxilia na instalação do php e outros programas par o ambiente de desenvolvimento.

Arquivo de configuração do Apache:
httpd.conf

Arquivo de configuração do PHP:
php.ini

Alterado o document root no httpd.conf, de C:\xampp\htdocs para D:\GitHub\curso_php_completo

Caso queira alterar alguma informação ou configuração, deve-se usar o arquivo do programa que comanda o recurso alterado.

> Xamp Control Panel
* Inicia o serviço Apache
* Configura para iniciar junto com o windows
* Configura como serviço, rodando sempre que a máquina estiver ligada

Portas Apache
porta 80 - protocolo http
porta 443 - protocolo https

Porta Mysql
porta 3306


-------ARQUITETURA CLIENTE SERVIDOR------

O php roda apenas no lado do servidor, e sempre devolve (o response) um código html


-------VARIÁVEIS------

função var_dump -> exibe o tipo de dado, o tamanho da variável e o conteúdo.

-------CONSTANTES------

Usado quando for necessário uma "variável" que não possa ter o valor alterado, naquela página. 
Ex: definição de idioma, conexão com db

usado o 'define' para ser declarada.

-------INCLUDE E REQUIRE------

Auxilia na modularização, permitindo importar arquivos para dentro da minha página e utilizar os recursos desses arquivos nessa página.

***Ficar atento aos erros, pode ocorrer no arquivo original e não onde está sendo usado o include***

Quando o arquivo não está na mesma pasta deve-se ficar atento ao path do include.

require ou include ONCE: Pode ocorrer de eu solicitar um require e o arquivo solicitado tambem tenha um require. O ONCE evita que eu utilize a mesma função duas vezes, caso o eu esteja incluindo um arquivo que está dentro do requisitado.

Diferença entre include e require:

Require -> Obriga que o arquivo existe e esteja funcionando corretamente, caso não seja dessa maneira, ocorrerá erro fatal. ideal de ser usado quando não tenho uma configuração específica para o include, pois obriga o código a funcionar corretamente.


Include -> Tenta executar o restante do código mesmo se houverem falhas no arquivo solicitado. E tem mais recursos.


-------SESSAO------

São semelhantes as constantes. E sao visualizadas enquanto o usuário está conectado. Conecta o usuário ao servidor. Funciona criando um arquivo temporário no cliente e outro no servidor, fazendo a ponte para a conexão, geralmente durando 20 min.
Sempre será usado o session_start() no código, a nao ser que eu altere no php.ini.
Cada sessão gera um id pelo servidor, podendo ser verificada pela função session_id();
funções para sessão: https://www.php.net/manual/pt_BR/book.session.php


-------FUNÇÕES------

Lembrar de que parâmetros obrigatórios devem ir sempre a esquerda.


Parametro por valor x referencia:
Por padrão existe o escopo da função, onde se eu usar uma função e alterar o seu valor, esse valor só será alterado na função. Essa é a passagem por valor.
A passagem por referencia, informa o endereço da varável para ser alterado lá, atualizando seu valor de acordo com a função. Para isso basta usar o & ao lado do parametro.

Funções anônimas:
Usada para funções que provavelmente vão demorar para serem executadas.


-------DATAS------

A função date() exige no mímino um argumento, que é o formado da data.
Ex: date("d/m/Y");

O time stamp é gerado de acordo com a minha necessidade e utilizado para calcular minhas datas, a referencia dele é a quantidade de segundos desde 01/01/1970. Posso usar o comando time() para gerá-lo.

setlocale: parametro LC_ALL muda toda minha configuração de local para o local que será definido. Em seguida defino o local. Ideal utilizar os padrões (windows, linux e utf-8).
Formatações strftime: https://www.php.net/manual/pt_BR/function.strftime.php

De preferenci usar as classes datetime.


-------ORIENTAÇÃO A OBJETOS------

Classes -> Meios de organização do software, onde seus atributos e métodos correspondem a um determinado assunto ou recurso.

Objeto -> É uma varável que representa a classe, podendo ser instanciada em outro local do sistema.

Static -> Permite que eu execute ou acesse alguma informação de uma classe, sem necessidade de instanciar, podendo usar dentro do setter por exemplo.


-------MÉTODOS MÁGICOS------

os métodos que começam dois underlines (dunder) __
ex: __construct

Funções do __destruct:
desconectar do bd, encerrar variaveis, etc...

Evita que eu faça os setter manualmente


-------ENCAPSULAMENTO------

Proteção ou restrições/modificações de acesso. Muito importante no uso de herança.

Podendo restringir os acessos as variáveis de uma classe
Quais recursos acessam atributos e métodos?

1 - Funções
2 - Filhas (extends)
3 - Objetos

Tipos: 
* Public: Todos acessam
* Protected: Mesma classe e classe extendida (objeto nao acessa)
* Private: Nem mesmo uma classe filha acessa a variavel

-------HERANÇA------

*PROCURAR PROJETAR BEM AS CLASSES ANTES DE INICIAR QUALQUER PROJETO, PENSANDO EM HERANÇA*


-------INTERFACE------

Código usado para definição de padrões. Quando for criada alguma coisa, a interface pode ser usada para que o php solicite métodos obrigatórios com encapsulamento definidos.
Será informado/configurado quais métodos preciso ter, se serão privados, publicos ou protegidos...
Ex: Documentação de API.

-------CLASSES ABSTRATAS------

A classe abstrata se assemelha a interface, porem definem o que os métodos vão realizar. 
Um objeto não instancia a classe abstrata. Apenas usa uma classe que extenda a classe abstrata.

Para usá-la uso a palavra reservada 'abstract'

-------POLIMORFISMO------

Quando há um método com mesmo nome em classes diferentes e com comportamentos diferentes.

Utiliza a palavra reservada 'parent' para concatenar um método com o método da classe pai

-------AUTOLOAD------


Função para carregar classes automaticamente sem precisar do require/include.
Geralmente o autoload é incluído num arquivo de configurações.

-------NAMESPACES------

Permite organizar pastas para os diretórios. Pode ser usado quando há duas classes com o mesmo nome (obviamente em diretorios diferentes).


OGRANIZAÇÃO DE CLASSES: AULA 52

-------BANCO DE DADOS------

Campo senha - varchar 256.


NEW SCHEMA db8;// cria uma base
USE db_php8; // acessa o banco criado
CREATE TABLE tb_usuarios() // cria uma tablea no banco
(
    idusuario INT NOT NULL AUTO_INCREMENT PRIMARY KEY;
) // criou a coluna idususario

INSERT INTO tb_usuarios (deslogin, dessenha) VALUES ('root','1234');  //insere no banco um usuario;

SELECT * FROM tb_usuarios; //mostra/exibe toda a tabela usuarios

UPDATE tb_usuarios SET dessenha = '54321' WHERE idusuario=1; //altera a senha do usuario com id 1.

DELETE FROM tb_usuarios WHERE idusuario = 1; // deleta o usuário

TRUNCATE TABLE tb_usuarios;//reseta a tabela toda, como se não houvessem registros nela antes.





-------PHP COM BANCO DE DADOS------

As funções mysqli_connect e afins foram depreciadas no php7. Atualmente é possivel eu usar a classe msqli ou utilizar o PDO. A diferença é que o PDO pode se comunicar com qualquer banco e não apenas o MySql.

-------PDO *RECOMENDADO* aqui está o crud------

PHP Data Object
Sempre será usado para tratativas com o banco de dados.

$conn = new PDO("mysql:dbname=db_php8;host:localhost",'root','');//o primeiro parametro é o db type, se fosse outro banco (sqlserver) seria alterado esse parametro

-------PDO INSERINDO DADOS NO BANCO------

$stmt = $conn->prepare("INSERT INTO tb_usuarios (deslogin, dessenha) VALUES (:LOGIN,:PASSWORD)");

-------PDO ALTERADO DADOS NO BANCO------

$stmt = $conn->prepare("UPDATE tb_usuarios SET deslogin = :LOGIN, dessenha = :PASSWORD WHERE idusuario = :ID ");

-------PDO DELETANDO DADOS NO BANCO------

$stmt = $conn->prepare("DELETE FROM tb_usuarios WHERE idusuario = :ID ");

-------TRANSAÇÕES------

FICAR ATENTO AO INNODB:
Execute este script:

ALTER TABLE tb_usuario ENGINE = INNODB;

A diferença do InnoDB é que ele permite que as transações funcionem, a outra Engine não permite isso

$conn -> beginTransaction()

Desfazer updates e deletes no banco, executando os comandos apenas quando algumas condições forem estabelecidas e cupmpridas. Comit - rollback


-------DAO: DATA ACCESS OBJECT------

